use std::{fs, path::PathBuf};

use cursive::{
    view::{Nameable, Scrollable},
    views::{Checkbox, Dialog, DummyView, LinearLayout, SelectView, TextView},
    Cursive, CursiveExt,
};

pub struct Context {}

pub struct Tui {
    siv: Cursive,
}

impl Tui {
    pub fn new() -> Self {
        let mut siv = Cursive::default();
        siv.set_user_data(Context {});
        Self { siv }
    }

    pub fn run(&mut self) {
        let config_path = PathBuf::from(".nixsec.nix");

        if !config_path.exists() {
            Self::show_init_dialog(&mut self.siv);
        } else {
            Self::show_main_menu(&mut self.siv);
        }

        self.siv.run();
    }

    fn show_init_dialog(siv: &mut Cursive) {
        siv.add_layer(
            Dialog::around(TextView::new(
                "No .nixsec.nix file found. Should I create one for you?",
            ))
            .button("Yes", |s| {
                s.pop_layer();
                Self::create_config_file(s);
                Self::show_main_menu(s);
            })
            .button("No", |s| s.quit()),
        );
    }

    fn show_main_menu(siv: &mut Cursive) {
        let mut menu = SelectView::new().with_inactive_highlight(false);
        menu.add_item("Add host", 1);
        menu.add_item("Add admin", 2);
        menu.add_item("Add secret", 3);

        menu.set_on_submit(|s, item| {
            match item {
                1 => {}
                2 => {}
                3 => Self::new_secret(s),
                _ => {}
            };
        });

        let mut secrets = SelectView::new().with_inactive_highlight(false);
        secrets.add_item("foo", 0);

        siv.add_layer(
            Dialog::around(
                LinearLayout::vertical()
                    .child(menu)
                    .child(DummyView)
                    .child(secrets.scrollable()),
            )
            .title("NixSec")
            .button("Quit", |s| s.quit()),
        );
    }

    fn new_secret(siv: &mut Cursive) {
        let mut hosts = LinearLayout::horizontal().child(
            LinearLayout::vertical()
                .child(Checkbox::new().with_name("hermes"))
                .child(Checkbox::new().with_name("zeus")),
        );

        let mut hostnames = LinearLayout::horizontal().child(
            LinearLayout::vertical()
                .child(TextView::new("hermes"))
                .child(TextView::new("zeus")),
        );

        siv.add_layer(
            Dialog::around(
                LinearLayout::horizontal()
                    .child(hosts)
                    .child(DummyView)
                    .child(hostnames),
            )
            .title("New secret")
            .button("Cancel", |s| {
                s.pop_layer();
            }),
        );
    }

    fn create_config_file(siv: &mut Cursive) {
        fs::write(".nixsec.nix", default_config()).unwrap();
    }
}

fn default_config() -> String {
    let key: String = fs::read_to_string(
        home::home_dir()
            .map(|h| h.join(".ssh/id_ed25519.pub"))
            .unwrap(),
    )
    .unwrap()
    .split(' ')
    .take(2)
    .map(|s| s.to_string())
    .collect::<Vec<String>>()
    .join(" ");

    let lines = [
        "{",
        "  admins = {",
        &format!("    {} = \"{}\";", whoami::username(), key),
        "  };",
        "",
        "  hosts = {",
        "  };",
        "",
        "  derivations = {",
        "  };",
        "",
        "  # ----------------------------------------------------------------------------",
        "  # !!     THIS BLOCK IS AUTOMATICALLY GENERATED BY NIXSEC. DO NOT CHANGE     !!",
        "  # ----------------------------------------------------------------------------",
        "  secrets = {",
        "  };",
        "}",
    ];

    lines.join("\n")
}
